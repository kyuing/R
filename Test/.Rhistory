1+1
1
cls
clear
cls
clear
help
1
ddd
true
TRUE
T
Sys.Date()
"hello"
hello
'ddd'
time()
Sys.time()
1.1 //ddd
string <- 'hello world'
stringVar
stringVar
stringVar
stringVar
stringVar
stringVar
greeting
greeting
data
hi
hi
hi
hi
hi
num
num
num
exists("num")
exists("hi")
ls
hi
#
#
# num <- 1
#
# num <- 1
# num
#
# num <- 1
# num
# exists("hi")
hi
hi
hi
hi
data
data
data
1
data
number
a
a
a
a
a
a
a
a
a
a
ls()
a <- NULL
a
a <- 100
a
a
a
a
a
sayhello
sayhello
sayhello <- "hello world"
sayhello <- "hello world"
sayhello
sayhello
sayhello
intNum <- 1
intNum
intNum
sayhello <- "hello world"
sayhello
int_num <- 1
int_num
double_num <- 3.143342
double_num
isTrue <- T
isTrue
isFALSE()
isFALSE(sayhello)
isFalse <- F
isFalse
# vector
string_vectors <- c("one", "two", "three")
string_vectors
string_vector <- c("one", "two", "three")
string_vector
num_vector <- c(1, 2, 3)
num_vector
logical_vector <- c(T, F, T, F, T)
logical_vector
# In R,
# To declare and initialize  variable,
# run (ctrl + enter) the script on the line.
# if multiple lines, select code blocks
# and then run (ctrl + enter) the script
# string
sayhello <- "hello world"
sayhello
# int
int_num <- 1
int_num
# double
double_num <- 3.143342
double_num
# boolean
isTrue <- T
isTrue
isFalse <- F
isFalse
# vector
string_vector <- c("one", "two", "three")
string_vector
num_vector <- c(1, 2, 3)
num_vector
logical_vector <- c(T, F, T, F, T)
logical_vector
# https://rstudio.cloud/learn/primers/1.1
# https://www.youtube.com/watch?v=jfUTC3mJFdg
myCars <- mtcars
View(myCars)
myCars <- mtcars
View(myCars)
hpAndWt <- data.frame(myCars$hp,myCars$wt)
View(hpAndWt)
# rename the extracted field
names(hpAndWt) <- c("hp", "wt")
#install ggplot2
install.packages("ggplot2")
# import ggplot2 library
library(ggplot2)
# init a graph with x and y axis
ggplot(data = hpAndWt,aes(x=hpAndWt$wt,y=hpAndWt$hp))
ggplot(hpAndWt,aes(wt,hp))
# assign ggplot parameters without the data frame to G
G <- ggplot(hpAndWt,aes(wt,hp))
# bar
G+geom_bar(stat = 'identity')
G+geom_histogram(binwidth = 5, fill='green')
# init a graph with x to be horse power and y to be weight on axis
# in other words, set a background of graph
ggplot(data = hpAndWt,aes(x=hpAndWt$hp,y=hpAndWt$wt))
# assign ggplot parameters without the data frame to G
HW <- ggplot(hpAndWt,aes(hp,wt))
View(G)
# assign ggplot parameters without the data frame to G
HW <- ggplot(hpAndWt,aes(hp,wt))
View(G)
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
myCars <- mtcars
View(myCars)
# extract hourse power and weight
hpAndWt <- data.frame(myCars$hp,myCars$wt)
View(hpAndWt)
# rename the extracted field
names(hpAndWt) <- c("hp", "wt")  # vector
attach(hpAndWt)
# init a graph with x to be horse power and y to be weight on axis
# in other words, set a background of graph
ggplot(data = hpAndWt,aes(x=hpAndWt$hp,y=hpAndWt$wt))
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
# import ggplot2 library
library(ggplot2)
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
ggplot(data = hpAndWt,aes(x=hpAndWt$hp,y=hpAndWt$wt))
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
# access the variables present
# in the data framework without calling the data frame
attach(hpAndWt)
# assign ggplot parameters without the data frame to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
# assign ggplot parameters without the data frame to HW
ggplot(hpAndWt,aes(hp,wt))
# assign the ggplot obj and its param to HW
HW <- ggplot(hpAndWt,aes(hp,wt))
H <- ggplot(hpAndWt,aes(hp)) # H = hourse power
H+geom_bar(stat = 'identity')
H+geom_histogram(binwidth = 5, fill='green')
# In R,
# To declare and initialize  variable,
# run (ctrl + enter) the script on the line.
# if multiple lines, select code blocks
# and then run (ctrl + enter) the script
# string
sayhello <- "hello world"
sayhello
# int
int_num <- 1
int_num
# double
double_num <- 0.087675
double_num
# boolean
isTrue <- T
isTrue
isFalse <- F
isFalse
# vector: MUST BE THE SAME DATA TYPE!
string_vector <- c("one", "two", "three")
string_vector
num_vector <- c(1, 2, 3)
num_vector
logical_vector <- c(T, F, T, F, T)
logical_vector
# https://rstudio.cloud/learn/primers/1.1
# https://www.youtube.com/watch?v=jfUTC3mJFdg
myCars <- mtcars
View(myCars)
# extract hourse power and weight
hpAndWt <- data.frame(myCars$hp,myCars$wt)
View(hpAndWt)
# rename the extracted field
names(hpAndWt) <- c("hp", "wt")  # vector
#install ggplot2
install.packages("ggplot2")
# import ggplot2 library
library(ggplot2)
# access the variables present
# in the data framework without calling the data frame
attach(hpAndWt)
# init a graph with x to be horse power and y to be weight on axis
# (in other words, set a background of graph)
ggplot(data = hpAndWt,aes(x=hpAndWt$hp,y=hpAndWt$wt))
# let ggplot function have parameters with simplified names
ggplot(hpAndWt,aes(hp,wt))
# e.g. assign the ggplot obj and its param to variables as necessary
HW <- ggplot(hpAndWt,aes(hp,wt)) # HW = horse power and weight
H <- ggplot(hpAndWt,aes(hp)) # H = horse power
# bar example
H+geom_bar(stat = 'identity')
H+geom_histogram(binwidth = 5, fill='green')
install.packages("ggplot2")
clear
cls
pwd
ls
